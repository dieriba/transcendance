// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  nickname String  @unique
  email    String  @unique
  password String?

  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  hashed_refresh_token String?

  two_fa  TwoFa?   @relation("user_two_fa")
  profile Profile? @relation("user_profile")

  chatrooms         ChatroomUser[]
  messages          Message[]
  restricted_groups RestrictedUser[]
}

model Profile {
  id String @id @default(uuid())

  avatar     String?
  first_name String?
  last_name  String?
  fullname   String?
  gender     Gender?
  age        Int?
  user       User    @relation("user_profile", fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String  @unique
}

model Chatroom {
  id               String           @id @default(uuid())
  name             String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  users            ChatroomUser[]
  messages         Message[]
  restricted_users RestrictedUser[]
}

model Message {
  id          String   @id @default(uuid())
  content     String
  image_url   String?
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  chatroom    Chatroom @relation(fields: [chatroom_id], references: [id], onDelete: Cascade)
  chatroom_id String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChatroomUser {
  user        User         @relation(fields: [user_id], references: [id])
  user_id     String
  chatroom    Chatroom     @relation(fields: [chatroom_id], references: [id])
  chatroom_id String
  created_at  DateTime     @default(now())
  privilege   Role?
  restriction Restriction?

  @@unique([user_id, chatroom_id])
}

model RestrictedUser {
  user        User         @relation(fields: [user_id], references: [id])
  user_id     String
  chatroom    Chatroom     @relation(fields: [chatroom_id], references: [id])
  chatroom_id String
  created_at  DateTime     @default(now())
  restriction Restriction?

  @@unique([user_id, chatroom_id])
}

model TwoFa {
  id String @id @default(uuid())

  otp_secret   String?
  otp_auth_url String?

  otp_enabled   Boolean @default(false)
  otp_validated Boolean @default(false)

  user    User   @relation("user_two_fa", fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique
}

enum Gender {
  MALE
  FEMALE
  OTHER
  GENDERFLUID
  NON_BINARY
  MULTIGENDER
  TRANSGENDER
  DOG
  HORSE
}

enum Role {
  ADMIN
  MODERATOR
  REGULAR_USER
}

enum Restriction {
  MUTED
}
