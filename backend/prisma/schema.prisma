// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  nickname String  @unique @db.VarChar(16)
  email    String  @unique
  password String?
  status   STATUS  @default(OFFLINE)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  hashedRefreshToken String?

  twoFa   TwoFa?   @relation("userTwoFa")
  profile Profile? @relation("userProfile")

  blockedBy    User[] @relation("blockUser")
  blockedUsers User[] @relation("blockUser")

  friendRequestsReceived FriendRequest[] @relation("recipient")
  friendRequestsSent     FriendRequest[] @relation("sender")
  friends                Friends[]       @relation("users")
  friendUserFriends      Friends[]       @relation("friendUsers")

  receivedNotifications Notifications[]  @relation("userNotification")
  blockedChatroomUser   Chatroom[]       @relation("blockedUsers")
  chatrooms             ChatroomUser[]
  messages              Message[]
  restrictedGroups      RestrictedUser[]
}

model Friends {
  user      User     @relation("users", fields: [userId], references: [id])
  userId    String
  friend    User     @relation("friendUsers", fields: [friendId], references: [id])
  friendId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
}

model FriendRequest {
  sender      User     @relation("sender", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("recipient", fields: [recipientId], references: [id])
  recipientId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([senderId, recipientId])
}

model Profile {
  id String @id @default(uuid())

  avatar    String?
  firstname String? @db.VarChar(25)
  lastname  String? @db.VarChar(25)
  gender    Gender?
  age       Int?
  user      User    @relation("userProfile", fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
}

model Notifications {
  id          String @id @default(uuid())
  name        String @db.VarChar(15)
  description String @db.VarChar(50)
  user        User   @relation("userNotification", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Chatroom {
  id              String           @id @default(uuid())
  chatroomName    String?          @unique @db.VarChar(15)
  password        String?
  type            TYPE
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  numberOfUser    Int              @default(0)
  invitedUser     String[]
  users           ChatroomUser[]   @relation("chatroomUsers")
  blockedUsers    User[]           @relation("blockedUsers")
  messages        Message[]
  restrictedUsers RestrictedUser[]
}

model Message {
  id           String        @id @default(uuid())
  content      String        @db.VarChar(255)
  imageUrl     String?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  chatroom     Chatroom      @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId   String
  messageTypes MESSAGE_TYPES
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ChatroomUser {
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  chatroom    Chatroom         @relation("chatroomUsers", fields: [chatroomId], references: [id])
  chatroomId  String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  penFriend   String?
  role        ROLE?            @default(REGULAR_USER)
  userIBanned RestrictedUser[]

  @@unique([userId, chatroomId])
}

model RestrictedUser {
  admin                ChatroomUser @relation(fields: [adminId, chatroomId], references: [userId, chatroomId])
  adminId              String
  user                 User         @relation(fields: [userId], references: [id])
  userId               String
  chatroom             Chatroom     @relation(fields: [chatroomId], references: [id])
  chatroomId           String
  createdAt            DateTime     @default(now())
  restriction          RESTRICTION?
  restrictionTimeStart DateTime?
  restrictionTimeEnd   DateTime?
  reason               String?      @db.VarChar(255)

  @@unique([userId, chatroomId])
}

model TwoFa {
  id String @id @default(uuid())

  otpSecret  String?
  otpAuthUrl String?

  otpEnabled   Boolean @default(false)
  otpValidated Boolean @default(false)

  user   User   @relation("userTwoFa", fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

enum Gender {
  MALE
  FEMALE
  OTHER
  GENDERFLUID
  NON_BINARY
  MULTIGENDER
  TRANSGENDER
  DOG
  HORSE
}

enum ROLE {
  DIERIBA
  CHAT_ADMIN
  REGULAR_USER
}

enum RESTRICTION {
  BANNED
  MUTED
  KICKED
}

enum STATUS {
  ONLINE
  OFFLINE
  PLAYING
}

enum TYPE {
  PUBLIC
  PRIVATE
  PROTECTED
  DM
}

enum MESSAGE_TYPES {
  TEXT
  IMAGE
  REPLY
  DOCUMENT
}
