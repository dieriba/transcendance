// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(uuid())
  nickname               String          @unique @db.VarChar(16)
  email                  String          @unique
  password               String?
  status                 STATUS          @default(OFFLINE)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  hashedRefreshToken     String?
  firstConnection        Boolean         @default(true)
  twoFa                  TwoFa?          @relation("userTwoFa")
  profile                Profile?        @relation("userProfile")
  groupParameter         Group?          @relation("groupInvitation")
  blockedBy              User[]          @relation("blockUser")
  blockedUsers           User[]          @relation("blockUser")
  friendRequestsReceived FriendRequest[] @relation("recipient")
  friendRequestsSent     FriendRequest[] @relation("sender")
  friends                Friends[]       @relation("users")
  friendUserFriends      Friends[]       @relation("friendUsers")

  blockedChatroomUser Chatroom[]       @relation("blockedUsers")
  pong                Pong?            @relation("pong")
  chatrooms           ChatroomUser[]
  messages            Message[]
  restrictedGroups    RestrictedUser[]
  groupInvitation     InvitedUser[]
  allowForeignToDm    Boolean          @default(false)
}

model GameHistory {
  id        String   @id @default(uuid())
  winner    Pong     @relation("winnedGame", fields: [winnerId], references: [userId])
  winnerId  String
  looser    Pong     @relation("loosedGame", fields: [looserId], references: [userId])
  looserId  String
  matchDate DateTime @default(now())

  @@unique([winnerId, looserId, matchDate])
}

model Group {
  id   String @id @default(uuid())
  user User   @relation("groupInvitation", fields: [id], references: [id], onDelete: Cascade)

  allowAll        Boolean
  onlyAllowFriend Boolean
}

model Pong {
  user       User          @relation("pong", fields: [userId], references: [id], onDelete: Cascade)
  userId     String        @unique @default(uuid())
  victory    Int           @default(0)
  losses     Int           @default(0)
  rating     Int           @default(0)
  winnedGame GameHistory[] @relation("winnedGame")
  loosedGame GameHistory[] @relation("loosedGame")
}

model Friends {
  user      User     @relation("users", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  friend    User     @relation("friendUsers", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
}

model FriendRequest {
  sender      User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
  recipient   User     @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([senderId, recipientId])
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation("userProfile", fields: [userId], references: [id], onDelete: Cascade)

  avatar    String?
  firstname String? @db.VarChar(25)
  lastname  String? @db.VarChar(25)
}

model Chatroom {
  id              String           @id @default(uuid())
  chatroomName    String?          @unique @db.VarChar(20)
  password        String?
  type            TYPE
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  invitedUser     InvitedUser[]    @relation("invitedUsers")
  active          Boolean          @default(true)
  users           ChatroomUser[]   @relation("chatroomUsers")
  blockedUsers    User[]           @relation("blockedUsers")
  messages        Message[]
  restrictedUsers RestrictedUser[]
}

model Message {
  id         String   @id @default(uuid())
  content    String   @db.VarChar(255)
  imageUrl   String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ChatroomUser {
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  chatroom    Chatroom         @relation("chatroomUsers", fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId  String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  role        ROLE?            @default(REGULAR_USER)
  userIBanned RestrictedUser[]
  penFriend   String?

  @@unique([userId, chatroomId])
}

model InvitedUser {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  chatroom   Chatroom @relation("invitedUsers", fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, chatroomId])
}

model RestrictedUser {
  admin                ChatroomUser @relation(fields: [adminId, chatroomId], references: [userId, chatroomId], onDelete: Cascade)
  adminId              String
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  chatroom             Chatroom     @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId           String
  createdAt            DateTime     @default(now())
  restriction          RESTRICTION?
  restrictionTimeStart DateTime?
  restrictionTimeEnd   DateTime?
  banLife              Boolean
  reason               String?      @db.VarChar(255)

  @@unique([userId, chatroomId])
}

model TwoFa {
  id String @id @default(uuid())

  otpSecret     String?
  otpTempSecret String?

  otpEnabled Boolean @default(false)

  question String?
  answer   String?
  user     User    @relation("userTwoFa", fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @unique
}

enum ROLE {
  DIERIBA
  CHAT_ADMIN
  REGULAR_USER
}

enum RESTRICTION {
  BANNED
  MUTED
  KICKED
}

enum STATUS {
  ONLINE
  OFFLINE
  PLAYING
}

enum TYPE {
  PUBLIC
  PRIVATE
  PROTECTED
  DM
}
